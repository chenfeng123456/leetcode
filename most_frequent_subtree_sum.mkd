# Most Frequent Subtree Sum
## Description:
```
 Given the root of a tree, you are asked to find the most frequent subtree sum. The subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself). So what is the most frequent subtree sum value? If there is a tie, return all the values with the highest frequency in any order.
```
### Examples 1
```
Input:

  5
 /  \
2   -3

return [2, -3, 4], since all the values happen only once, return all of them in any order.
```
### Examples 2
```
Input:

  5
 /  \
2   -5

return [2], since 2 happens twice, however -5 only occur once.
```
### Note: 

- You may assume the sum of values in any subtree is in the range of 32-bit signed integer. 
```cpp
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> sum;
    int construct(TreeNode* root)
    {
        if(root->left==NULL&&root->right==NULL)
        {
            sum.push_back(root->val);
            return root->val;
        }
        else
        {
            int l=0,r=0;
            if(root->left!=NULL)
            {
                l=construct(root->left);
            }
            if(root->right!=NULL)
            {
                r=construct(root->right);
            }
        
            sum.push_back(l+r+root->val);
            return l+r+root->val;
        }
    }
    static bool compare(vector<int> a1,vector<int> a2)
    {
        return a1[1]>a2[1];
    }
    vector<int> findFrequentTreeSum(TreeNode* root) {
        vector<vector<int>> res;
        vector<int> ans;
        if(root==NULL) return ans;
        construct(root);
        sort(sum.begin(),sum.end());
        //vector<vector<int>> times;
        vector<int> temp(2,1);
        temp[0]=sum[0];
        //for(int i=0;i<sum.size();i++) cout<<sum[i]<<"   ";
        //cout<<endl;
        for(int i=1;i<sum.size();i++)
        {
            if(sum[i]!=sum[i-1])
            {
                res.push_back(temp);
                temp[0]=sum[i];
                temp[1]=1;
            }
            else temp[1]++;
        }
        res.push_back(temp);
        sort(res.begin(),res.end(),compare);
        ans.push_back(res[0][0]);
        for(int i=1;i<res.size();i++)
        {
            if(res[i][0]!=res[i-1][0]&&res[i][1]==res[i-1][1])
                ans.push_back(res[i][0]);
            else break;
        }//for(int i=0;i<res.size();i++) cout<<res[i][0]<<' '<<res[i][1]<<"    ";
        return ans;
    }
};
```
*******************************************
不会用哈希表做这道题真的麻烦啊。

我先用一个数组把各节点对应的和记录下来，再用一个二维数组记录这些和及它们出现的次数，然后对这个二维数组按次数排序，从第2个开始，如果它的次数跟前一个一样，则将其对应的和放入一个数组ans中存放，否则跳出循环。最后返回ans。
