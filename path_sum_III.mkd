# Path Sum III
## Description:
```
You are given a binary tree in which each node contains an integer value.

Find the number of paths that sum to a given value.

The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).

The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.
```
### Example:
```
root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

Return 3. The paths that sum to 8 are:

1.  5 -> 3
2.  5 -> 2 -> 1
3. -3 -> 11
```
```python
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def pathSum(self, root, sum):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: int
        """
        self.res = 0
        
        def traverse(root, sum, nodes):
            if root == None:
                return
            nodes.append(root.val)
            
            pathSum = 0
            for node in nodes[::-1]:
                pathSum += node
                if pathSum == sum:
                    self.res += 1
            traverse(root.left, sum, nodes.copy())
            traverse(root.right, sum, nodes.copy())
        
        traverse(root, sum, [])
        return self.res
```
************************************
这道题乍一看很复杂，但仔细一想其实就相当于给定了多个数组，要我们求这些数组中有多少个连续的子序列的和等于指定值。根据我们用递归遍历二叉树的顺序，我们采取求以当前元素为末尾的所有子序列的方法来对每一条路径进行归类。由于路径一定是连续的，所以对于每一个节点我们只需要遍历一次数组即可。