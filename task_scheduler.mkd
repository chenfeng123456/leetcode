# Task Scheduler
## Description:  
```
Given a char array representing tasks CPU need to do. It contains capital letters A to Z where different letters represent different tasks.Tasks could be done without original order. Each task could be done in one interval. For each interval, CPU could finish one task or just be idle.

However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.

You need to return the least number of intervals the CPU will take to finish all the given tasks.
```
### Example 1:

>#### Input: tasks = ["A","A","A","B","B","B"], n = 2
>#### Output: 8
>#### Explanation:
>```
A -> B -> idle -> A -> B -> idle -> A -> B.
>```
### Note:

   1. The number of tasks is in the range [1, 10000].
   2. The integer n is in the range [0, 100].
```cpp
class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        vector<int> times(26,0);
        int last=0;
        int maxT=0,len=tasks.size();
        for(int i=0;i<len;i++)
        {
            times[tasks[i]-'A']++;
        }
        sort(times.begin(),times.end());
        maxT=times[25];
        int i=25;
        while(i>=0&&times[i]==maxT) i--;
        return max(len,(maxT-1)*(n+1)+25-i);
    }
};
```
*************************************
- [思路来源1](https://leetcode.com/problems/task-scheduler/discuss/104496/concise-java-solution-on-time-o26-space)
- [思路来源2](https://www.cnblogs.com/grandyang/p/7098764.html)

先来解释一下题目的意思：
>>> A~Z代表24种不同的任务，同种任务间需有一个冷却间隔n,需要我们返回执行完所有任务所需的最小间隔数。

具体算法在思路来源2中讲得很详细：
**************************************
**************************************
```
这道题让我们安排CPU的任务，规定在两个相同任务之间至少隔n个时间点。说实话，刚开始博主并没有完全理解题目的意思，后来看了大神们的解法才悟出个道理来。下面这种解法参考了大神fatalme的帖子，由于题目中规定了两个相同任务之间至少隔n个时间点，那么我们首先应该处理的出现次数最多的那个任务，先确定好这些高频任务，然后再来安排那些低频任务。如果任务F的出现频率最高，为k次，那么我们用n个空位将每两个F分隔开，然后我们按顺序加入其他低频的任务，来看一个例子：

AAAABBBEEFFGG 3

我们发现任务A出现了4次，频率最高，于是我们在每个A中间加入三个空位，如下：

A---A---A---A

AB--AB--AB--A   (加入B)

ABE-ABE-AB--A   (加入E)

ABEFABE-ABF-A   (加入F，每次尽可能填满或者是均匀填充)

ABEFABEGABFGA   (加入G)

再来看一个例子：

ACCCEEE 2

我们发现任务C和E都出现了三次，那么我们就将CE看作一个整体，在中间加入一个位置即可：

CE-CE-CE

CEACE-CE   (加入A)

注意最后面那个idle不能省略，不然就不满足相同两个任务之间要隔2个时间点了。

这道题好在没有让我们输出任务安排结果，而只是问所需的时间总长，那么我们就想个方法来快速计算出所需时间总长即可。我们仔细观察上面两个例子可以发现，都分成了(mx - 1)块，再加上最后面的字母，其中mx为最大出现次数。比如例子1中，A出现了4次，所以有A---模块出现了3次，再加上最后的A，每个模块的长度为4。例子2中，CE-出现了2次，再加上最后的CE，每个模块长度为3。我们可以发现，模块的次数为任务最大次数减1，模块的长度为n+1，最后加上的字母个数为出现次数最多的任务，可能有多个并列。这样三个部分都搞清楚了，写起来就不难了，我们统计每个大写字母出现的次数，然后排序，这样出现次数最多的字母就到了末尾，然后我们向前遍历，找出出现次数一样多的任务个数，就可以迅速求出总时间长了。
```
************************************
************************************
这里我来解释以下最终结果的算法：

我们定义一个长度为26的数组times来记录每种任务出现的次数，然后对数组进行排序，将最后一个即出现的最大次数记录在一个变量maxT中，times中有多少个元素的值等于maxT就代表最后一次任务中有多少个任务。

  由于我们是纵向填入任务，那么有一行的任务数大于n+1，则所有行均大于n+1。此时的最小间隔数就是任务数。

同理，如果有一行的任务数小于n+1，那么所有行的任务数均小于n+1。此时的最小间隔数为(maxT-1)*(n+1)+25-i，这里25-i代表有多少个任务的次数为maxT。 