# Buddy Strings
## Description
```
Given two strings A and B of lowercase letters, return true if and only if we can swap two letters in A so that the result equals B.
```
 

### Example 1:
```
Input: A = "ab", B = "ba"
Output: true
```
### Example 2:
```
Input: A = "ab", B = "ab"
Output: false
```
### Example 3:
```
Input: A = "aa", B = "aa"
Output: true
```
### Example 4:
```
Input: A = "aaaaaaabc", B = "aaaaaaacb"
Output: true
```
### Example 5:
```
Input: A = "", B = "aa"
Output: false
```
 

### Note:

   1. 0 <= A.length <= 20000
   2. 0 <= B.length <= 20000
   3. A and B consist only of lowercase letters.

#### wrong code(*Accepted*)
```python
class Solution:
    def buddyStrings(self, A, B):
        """
        :type A: str
        :type B: str
        :rtype: bool
        """
        s1 = set(A)
        s2 = set(B)
        if len(A) != len(B) or s1 != s2:
            return False
        elif A == B and len(A) > len(s1):
            print("here")
            return True
        

        
        length = len(A)
        index1 = length
        index2 = length
        
        for i in range(length):
            if A[i] != B[i]:
                if index1 != length and index2 != length:
                    return False
                elif index1 == length:
                    index1 = i
                else:
                    index2 = i
                    break
        else:
            return False
        
        if A[index1] == B[index2] and A[index2] == B[index1]:
            return True
        else:
            return False
```


#### nice code(*Accepted*)
```python
class Solution:
    def buddyStrings(self, A, B):
        """
        :type A: str
        :type B: str
        :rtype: bool
        """
        if len(A) != len(B) : return False
        i = 0
        x,y = -1, -1
        if A == B:
            for j,a in enumerate(A):
                if a in A[j+1:]:
                    return True
        else:
            for j,(a,b) in enumerate(zip(A,B)):
                if a != b:
                    if i == 2:
                        return False
                    else:
                        i += 1
                        if x == -1:
                            x = j
                        else:
                            y = j
        if x > -1 and y > -1 and A[x] == B[y] and A[y] == B[x]:
            return True
            
        return False
```
*****************************************
这题的test case情况覆盖得不全面，如果A、B前面有两个字刚好是反的，但后面还有不一样的字，我的代码其实是检查不出来的。比如说：
```
Input: 
"abcd"
"badc"
My answer: true
Expected answer: false
```

另外关于python中的enumerate函数，它的作用是将一个可遍历的数据对象组合成一个索引序列，即同时列出数据下标和数据本身。