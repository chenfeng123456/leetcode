Add Two Numbers
===========================
Description:
-------------------
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example
----------------------
Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)<br>
Output: 7 -> 0 -> 8<br>
Explanation: 342 + 465 = 807.<br>




```cpp
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    void add(ListNode* l1,ListNode* l2,int extra)
    {
        if(l1!=NULL&&l2!=NULL)
        {
            int sum=l1->val+l2->val+extra;
            if(sum>=10)
            {
                l1->val=sum%10;
                if(l1->next==NULL)
                {
                    l1->next=new ListNode(1);
                }
                else add(l1->next,l2->next,1);
            }
            else
            {
                l1->val=sum;
                add(l1->next,l2->next,0);
            }
        }
        else if(l1!=NULL&&l2==NULL)
        {
            l1->val+=extra;
            if(l1->val>=10)
            {
                l1->val=l1->val%10;
                if(l1->next==NULL)
                {
                    l1->next=new ListNode(1);
                }
                else add(l1->next,NULL,1);
            }
        }
    }
    
    
    int length(ListNode* l,int len)
    {
        if(l->next==NULL) return len;
        else return length(l->next,len+1);
    }
    
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int len1=length(l1,1);
        int len2=length(l2,1);
        if(len2>len1)
        {
            add(l2,l1,0);
            return l2;
        }
        else
        {
            add(l1,l2,0);
            return l1;
        }
    }
};
```
********************************************************************
这道题主要要考虑到两个链表长度不等的情况，这时需要对二者区别处理。因此我们定义一个函数length(ListNode* l,int len)专门用于测定链表的长度。然后再定义一个完成相加操作的函数，add(ListNode* l1,ListNode* l2,int extra)，在传入参数时始终把较长的那个链表传给l1，这样在add中就能专心进行相加操作了。<br>
由于给定的链表是低位在前，高位在右，所以相加时前端对齐。如果和大于10，就令extra=1，传入下一次操作的形参中。若最高位大于10，则还要在结尾处新开辟一个位置放“1”。若l2已到最高位而l1还没有，则在递归时将null传给l2，然后只考虑l1->val和extra相加的情况即可。
