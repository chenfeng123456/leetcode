# Binary Tree Tilt
## Description:
```
Given a binary tree, return the tilt of the whole tree.

The tilt of a tree node is defined as the absolute difference between the sum of all left subtree node values and the sum of all right subtree node values. Null node has tilt 0.

The tilt of the whole tree is defined as the sum of all nodes' tilt.
```
### Example:
```
Input: 
         1
       /   \
      2     3
Output: 1
Explanation: 
Tilt of node 2 : 0
Tilt of node 3 : 0
Tilt of node 1 : |2-3| = 1
Tilt of binary tree : 0 + 0 + 1 = 1
```
### Note:

   1. The sum of node values in any subtree won't exceed the range of 32-bit integer.
   2. All the tilt values won't exceed the range of 32-bit integer.
```python
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def findTilt(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        
        
        def count(root):
            if root == None:
                return 0, 0
            
            left_sum, left_tilt = count(root.left)
            right_sum, right_tilt = count(root.right)
            tilt = abs(left_sum - right_sum)
            tilt_of_the_tree = tilt + left_tilt + right_tilt
            sum_of_the_tree = left_sum + right_sum + root.val
            return sum_of_the_tree, tilt_of_the_tree
        
        _, res = count(root)
        return res
```
**********************************************
这题明白了题意就好办了。注意这里**节点的tilt**和**整棵树的tilt**的差异，**节点的tilt**是指左右子树分别对各自节点求和然后二者再做差，**整棵树的tilt**是指所有节点tilt之和。所以在用递归时我们既要返回左右子树的节点和，又要返回**左右子树的tilt**，最终我们只返回tilt即可。