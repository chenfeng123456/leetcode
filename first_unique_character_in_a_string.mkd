# First Unique Character in a String
## Description:
```
 Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.
```
### Examples:
```
s = "leetcode"
return 0.

s = "loveleetcode",
return 2.
```
### Note: 
You may assume the string contain only lowercase letters. 

#### my code(*Accepted*)
```python
class Solution:
    def firstUniqChar(self, s):
        """
        :type s: str
        :rtype: int
        """
        count = set()
        index = set()
        for each in s:
            if each in count:
                index.discard(s.index(each))
            else:
                count.add(each)
                index.add(s.index(each))
                
        if len(index) != 0:
            return min(index)
        else:
            return -1
```


#### nice code(*Accepted*)
```python
class Solution:
    def firstUniqChar(self, s):
        """
        :type s: str
        :rtype: int
        """
        result = len(s)
        for char in 'abcdefghijklmnopqrstuvwxyz':
            idx_left = s.find(char)
            if idx_left != -1:
                idx_right = s.rfind(char, idx_left)
                if idx_left == idx_right:
                    result = min(result, idx_left)
        return result if result < len(s) else -1
```
**************************
我的方法很简单就不说了，说一说最快的代码是个什么思路。

它的思路是只需要遍历26个字符，求出每个字符在字符串中第一次出现的下标和最后一次出现的下标，如果两个下标相等，则说明只出现过一次。然后用一个变量来存放最小的下标值。注意这个变量被初始化为了字符串的长度。如果最后它的值不小于字符串的长度的话，说明没有符合条件的结果，所以应该返回-1。

在来说一下这里用到的python语法中要注意的东西：

- 创建空集合必须要用：s = set()的形式，如果用花括号会被认为是字典。
- str.rfind(str, beg=0 end=len(string))
    - str -- 查找的字符串
    - beg -- 开始查找的位置，默认为0
    - end -- 结束查找位置，默认为字符串的长度。
- 获取下标：str.index()。在字符串里查找子串第一次出现的位置，类似字符串的find方法，不过比find方法更好的是，如果查找不到子串，会抛出异常，而不是返回-1

