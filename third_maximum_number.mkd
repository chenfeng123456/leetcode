Third Maximum Number
============
Description:
---------------------
Given a non-empty array of integers, return the third maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).

Example 1:
---------
Input: [3, 2, 1]

Output: 1

Explanation: The third maximum is 1.

Example 2:
----------
Input: [1, 2]

Output: 2

Explanation: The third maximum does not exist, so the maximum (2) is returned instead.

Example 3:
-----------
Input: [2, 2, 3, 1]

Output: 1

Explanation: Note that the third maximum here means the third maximum distinct number.
Both numbers with value 2 are both considered as second maximum.





```c
int thirdMax(int* nums, int numsSize) {
    if(numsSize==1) return nums[0];
    if(numsSize==2) return(nums[0]>nums[1]?nums[0]:nums[1]);
    int bl[3][2]={-2147483648,0,-2147483648,0,-2147483648,0};
    for(int i=0;i<numsSize;i++)
    {
        if(nums[i]>=bl[0][0])
        {
            if(nums[i]==bl[0][0]) 
            {
                bl[0][1]=1;
                continue;
            }
            int temp=bl[0][0];
            bl[0][0]=nums[i];
            if(bl[0][1]!=0)
            {    
                for(int j=1;j<3;j++)
                {
                    int t=bl[j][0];
                    bl[j][0]=temp;
                    temp=t;
                    if(bl[j][1]==0)
                    {
                        bl[j][1]=1;
                        break;
                    }
                }
            }
            else bl[0][1]=1;
        }
        else if(nums[i]>=bl[1][0])
        {
            if(nums[i]==bl[1][0]) 
            {
                bl[1][1]=1;
                continue;
            }
            int temp=bl[1][0];
            bl[1][0]=nums[i];
            if(bl[1][1]!=0)
            {
                bl[2][0]=temp;
                bl[2][1]=1;
            }
            else bl[1][1]=1;
        }
        else if(nums[i]>=bl[2][0])
        {
            bl[2][0]=nums[i];
            bl[2][1]=1;
        }
    }
    if(bl[2][1]==0) return bl[0][0];
    else return bl[2][0];
}
```
************************************
对于本题我们可以定义一个二维数组bl[3][2],其中每行第一个元素用于存放第i大的数，第二个元素存放这个位置是否已有给定数组中的数存放在里面。<br>
我们遍历数组，对于每个数都判断一次其是否大于bl[0][0],bl[1][0],bl[2][0]。若大于，则还需判断bl[i][1]是否为1，若为1，则需要进行将数组中的元素后移一位的操作，为当前数“腾”出位置。
