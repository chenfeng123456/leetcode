#House Robber III
##Description:

```
 The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the "root." Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that "all houses in this place forms a binary tree". It will automatically contact the police if two directly-linked houses were broken into on the same night.

Determine the maximum amount of money the thief can rob tonight without alerting the police.
```

###Example 1:
```
     3
    / \
   2   3
    \   \ 
     3   1

Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.
```

###Example 2:
```

     3
    / \
   4   5
  / \   \ 
 1   3   1

Maximum amount of money the thief can rob = 4 + 5 = 9.
```
```cpp
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int rob(TreeNode* root,bool prerob)
    {
        if(root==NULL) return 0;
        if(prerob==false)
        {
            int m,n;
            m=root->val+rob(root->left,true)+rob(root->right,true);
            n=rob(root->left,false)+rob(root->right,false);
            return max(m,n);
        }
        else 
        {
            return rob(root->left,false)+rob(root->right,false);
        }
    }
    
    
    int rob(TreeNode* root) {
        return rob(root,false);
    }
};
``` 
*************************************
此题中，若与之相连的上一个节点没有抢，则此时小偷有两种选择：抢或者不抢；若上一个节点已经被抢，则这个节点不能抢。

所以我们定义一个函数rob(TreeNode* root,bool prerob)来返回指定节点后能够抢到金额的最大值，其中prerob用来表示上一个节点是否被抢。然后根据上述情况讨论即可。