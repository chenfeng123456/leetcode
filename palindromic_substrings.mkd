Palindromic Substrings
====================
Description:
---------------
 ```
 Given a string, your task is to count how many palindromic substrings in this string.

The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.
```
Example 1:
-------------------
```
Input: "abc"
Output: 3
Explanation: Three palindromic strings: "a", "b", "c".
```

Example 2:
----------------
```
Input: "aaa"
Output: 6
Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".
```
Note:
----------
```
    1.The input string length won't exceed 1000.
```





```cpp
class Solution {
public:
    int countSubstrings(string s) {
        int len=s.length(),amount=0;
        vector<vector<int>> dp(len,vector<int>(len,0));
        for(int i=len-1;i>=0;i--)
        {
            for(int j=i;j<len;j++)
            {
                dp[i][j]=(s[i]==s[j])&&(j-i<3||dp[i+1][j-1]);
                if(dp[i][j]) amount++;
            }
        }
        return amount;
    }
};
```
*******************************************************
```
这题跟 `Minimum ASCII Delete Sum for Two Strings` 有些类似，我们定义一个二维数组dp[i][j]表示从i到j的数组元素是否回文。主要考虑以下几个方面：
1.dp[i][j]回文，则它的子数组dp[i+1][j-1]必须回文且s[i]==s[j];
2.若j-i<3，即只含一个或两个元素，则其必定回文。
基于以上两点我们便可以写出递推关系式了。
```
**注意j一定要从i开始向后遍历，否则会漏掉单个元素的情况。**
`` `lkjl` ``
