# Remove K Digits
## Description:
```
Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.
```
### Note:

   1. The length of num is less than 10002 and will be ≥ k.
   2. The given num does not contain any leading zero.

### Example 1:

***Input***: 

num = "1432219", k = 3

***Output***:

 "1219"

***Explanation***:

 Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.

### Example 2:

***Input***:

 num = "10200", k = 1

***Output***: 

"200"

***Explanation***:

 Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.

### Example 3:

***Input***: 

num = "10", k = 2

***Output***: 

"0"

***Explanation***:

 Remove all the digits from the number and it is left with nothing which is 0.

```cpp
public class Solution {
    public String removeKdigits(String num, int k) {
        int digits = num.length() - k;
        char[] stk = new char[num.length()];
        int top = 0;
        // k keeps track of how many characters we can remove
        // if the previous character in stk is larger than the current one
        // then removing it will get a smaller number
        // but we can only do so when k is larger than 0
        for (int i = 0; i < num.length(); ++i) {
            char c = num.charAt(i);
            while (top > 0 && stk[top-1] > c && k > 0) {
                top -= 1;
                k -= 1;
            }
            stk[top++] = c;
        }
        // find the index of first non-zero digit
        int idx = 0;
        while (idx < digits && stk[idx] == '0') idx++;
        return idx == digits? "0": new String(stk, idx, digits - idx);
    }
}
```
********************************************
- [思路来源1](https://leetcode.com/problems/remove-k-digits/discuss/120311/~)
- [思路来源](https://blog.csdn.net/qq508618087/article/details/52584133)

这道题的核心思想就是尽可能地使原数组保持递增。

要想是一个数尽可能小，最快的方法就是其高位尽可能小，，对这道题而言就是要把较小数字前面所有比它大的数删去来使之变成高位。

思想就是这样，但要高效地实现依然不容易。我们来看看代码的实现方法。

***直接在数组或string的基础上删除元素的代价太高，所以我们采用以空间换时间的策略***。新建一个数组，只将需要保留的数往里面填充。再用一个变量digits记录最终数组的长度应该是多少。

这里还有一个变量top，顾名思义，这其实是在模拟栈的运行方式，top表示栈顶的下标，在这里也就是最终答案的最后一个数字的位置。显然在填充的过程中top后面还会有数字，但这些实际上已经被“删除”了，因为这些数肯定会被后面的数依次覆盖。



可见，思路固然很重要，但实现方式依然不能忽略。比如这里**用一个空数组来填充需要保留的数以替代删除操作**就是一个很实用的实现方法。
