Partition Labels
==================
Description:
-----------------

 A string S of lowercase letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.

Example 1:
-------------------
Input: S = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits S into less parts.

Note:
------------------------------------
    1.S will have length in range [1, 500].
    2.S will consist of lowercase letters ('a' to 'z') only.





```cpp
class Solution {
public:
    int endIndex(string S,int start)
    {
        char c=S[start];
        int end=start;
        for(int i=start;i<S.length();i++)
            if(S[i]==c) end=i;
        return end;
    }
    
    
    int endI(string S,int start)
    {
        int end=endIndex(S,start);
        for(int i=start;i<=end;i++)
            if(end<endIndex(S,i)) end=endIndex(S,i);
        return end;
    }
    
    vector<int> partitionLabels(string S) {
        vector<int> answer;
        int start=0,end=0;
        for(;start<S.length();start=end+1)
        {
            end=endI(S,start);
            answer.push_back(end-start+1);
        }
        return answer;
    }
};
```
用了个简单粗暴的方法，即每次从下标为start的元素开始，然后调用函数找当前元素最后一次出现时的下标，若该下标大于end，则将end扩大到该下标处。
