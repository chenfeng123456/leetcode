# Ransom Note
## Description:
```
 Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.

Each letter in the magazine string can only be used once in your ransom note.
```
### Note:
```
You may assume that both strings contain only lowercase letters.

canConstruct("a", "b") -> false
canConstruct("aa", "ab") -> false
canConstruct("aa", "aab") -> true
```
#### my code(*Accepted*)
```python
class Solution:
    def canConstruct(self, ransomNote, magazine):
        """
        :type ransomNote: str
        :type magazine: str
        :rtype: bool
        """
        dic = {}
        for each in magazine:
            if each not in dic:
                dic[each] = 1
            else:
                dic[each] += 1
        
        
        
        for each in ransomNote:
            if each in dic and dic[each] > 0:
                dic[each] -= 1
            else:
                break
        else:
            return True
        return False
```
#### nice code(*Accepted*)
```python
class Solution:
    def canConstruct(self, ransomNote, magazine):
        """
        :type ransomNote: str
        :type magazine: str
        :rtype: bool
        """
        for w in set(ransomNote):
            if ransomNote.count(w) > magazine.count(w):
                return False
        return True
```
*************************************
我的方法很简单也很暴力，用一个字典记录每一个字符出现的次数。然后遍历ransomNote，遇到一个字符就将字典里对应的值减1，若对应值已经为0的话，则直接跳出循环，返回False；若成功遍历完整个ransomNote，则返回True。

然而最快的方法比我的还简单：直接计算每一个字符在两个字符串中出现的次数，若ransomNote出现的次数多，则返回False；否则返回True。