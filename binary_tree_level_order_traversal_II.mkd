# Binary Tree Level Order Traversal II
## Description:
```
Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).
```
For example:
Given binary tree [3,9,20,null,null,15,7],
```
    3
   / \
  9  20
    /  \
   15   7
```
return its bottom-up level order traversal as:
```
[
  [15,7],
  [9,20],
  [3]
]
```
```python
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def levelOrderBottom(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        if root == None:
            return []
        
        res = []
        queue = [root]
        level_len = 1
        level = []
        
        while len(queue) != 0:
            temp = queue.pop(0)
            level_len -= 1
            level.append(temp.val)
            if temp.left != None:
                queue.append(temp.left)
            if temp.right != None:
                queue.append(temp.right)
                
            if level_len == 0:
                res.append(level.copy())
                level.clear()
                level_len = len(queue)
        
        return res[::-1]
```
****************************************
这道题参考之前[Binary Tree Zigzag Level Order Traversal](https://github.com/chenfeng123456/leetcode/blob/tree/binary_tree_zigzag_level_order_traversal.mkd)的思路很容易就可以做出来，只是在用python做题的时候需要注意一下我们不能直接把level加到res中，因为之后我们还会把level清空，这样会导致被加进来的level指向的是个空list，因此这里我们用到list.copy()方法，将level拷贝一份放进res中即可避免这个问题。
