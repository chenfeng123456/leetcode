# N-ary Tree Level Order Traversal
## Description:
```
Given an n-ary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example, given a 3-ary tree:
 

 

We should return its level order traversal:

 

 

[
     [1],
     [3,2,4],
     [5,6]
]

```

### Note:

   1. The depth of the tree is at most 1000.
   2. The total number of nodes is at most 5000.

```python
"""
# Definition for a Node.
class Node(object):
    def __init__(self, val, children):
        self.val = val
        self.children = children
"""
class Solution(object):
    def levelOrder(self, root):
        """
        :type root: Node
        :rtype: List[List[int]]
        """
        if root == None:
            return []
        
        res = []
        current = [root]
        while len(current):
            temp = []
            level = []
            for each in current:
                temp.append(each.val)
                level.extend(each.children)
            res.append(temp)
            current = level
            
        return res
```
****************************************
这道题顺着之前几道题的思路很容易就能想出解决方法。我们还是把结果都放到一个res列表里。对于当前层节点用一个current存放；对于下一层节点，我们用列表level存放。同时还要用一个temp来存放当前节点的值。这里注意一下，往temp里面加入值的时候用append方法，而往level里面加值的时候要用exten方法，因为我们使用每个节点的children列表来扩充level，直接用append的话会导致level里面放的是一个个列表而非元素本身。