Minimum ASCII Delete Sum for Two Strings
==============
Description:
---------------
Given two strings s1, s2, find the lowest ASCII sum of deleted characters to make two strings equal.

Example 1:
-----------------------
Input: s1 = "sea", s2 = "eat"<br>
Output: 231<br>
Explanation: Deleting "s" from "sea" adds the ASCII value of "s" (115) to the sum.<br>
Deleting "t" from "eat" adds 116 to the sum.<br>
At the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.<br>

Example 2:
----------------------------
Input: s1 = "delete", s2 = "leet"<br>
Output: 403<br>
Explanation: Deleting "dee" from "delete" to turn the string into "let",<br>
adds 100[d]+101[e]+101[e] to the sum.  Deleting "e" from "leet" adds 101[e] to the sum.<br>
At the end, both strings are equal to "let", and the answer is 100+101+101+101 = 403.<br>
If instead we turned both strings into "lee" or "eet", we would get answers of 433 or 417, which are higher.<br>

Note:
------------
0 < s1.length, s2.length <= 1000.<br>
All elements of each string will have an ASCII value in [97, 122].<br>










```cpp
class Solution {
public:
    int minimumDeleteSum(string s1, string s2) {
        int l1=s1.length(),l2=s2.length();
        vector<vector<int>> dp(l1+1);
        for(int i=0;i<l1+1;i++)
            dp[i].resize(l2+1);
        dp[0][0]=0;
        for(int i=1;i<l2+1;i++)
            dp[0][i]=dp[0][i-1]+s2[i-1];
        for(int i=1;i<l1+1;i++)
            dp[i][0]=dp[i-1][0]+s1[i-1];
        for(int i=1;i<l1+1;i++)
        {
            for(int j=1;j<l2+1;j++)
            {
                int a;
                if(s1[i-1]==s2[j-1]) a=0;
                else a=s1[i-1]+s2[j-1];
                dp[i][j]=min(dp[i-1][j-1]+a,min(dp[i-1][j]+s1[i-1],dp[i][j-1]+s2[j-1]));
            }
        }
        return dp[l1][l2];
    }
};
```
************************************
[思路来源](https://www.cnblogs.com/stAr-1/p/7719289.html)
