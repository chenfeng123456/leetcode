# Diameter of Binary Tree
## Description:
```
 Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.
```
### Example:
```
Given a binary tree

          1
         / \
        2   3
       / \     
      4   5    

Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].
```
**Note**: The length of path between two nodes is represented by the number of edges between them.
```python
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def diameterOfBinaryTree(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        self.diameter = 0
        
        def findLongestPath(root):
            if root == None:
                return 0
            leftP = findLongestPath(root.left)
            rightP = findLongestPath(root.right)
            self.diameter = max(self.diameter, leftP + rightP)
            return max(leftP + 1, rightP + 1)
        
        findLongestPath(root)
        return self.diameter
```
********************************
这道题要求我们求出一个二叉树中相距最远的两端的距离。由于这条最长路径可能不经过根节点，所以我们需要在每次递归调用时都更新一遍diameter的值。具体计算的方法是对每一个节点求出其向左能走的最大距离和向右能走的最大距离，把二者加起来就是该节点的diameter。而对于父节点来说，二者中只有较长的那一条才是有用的，所以我们返回两条路径中较长的一条。注意计算左右路径长时是没有包含节点本身的，所以返回时还要加一。