# Lowest Common Ancestor of a Binary Search Tree
## Description:
```
Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

Given binary search tree:  root = [6,2,8,0,4,7,9,null,null,3,5]
```
```
        _______6______
       /              \
    ___2__          ___8__
   /      \        /      \
   0      _4       7       9
         /  \
         3   5
```
## Example 1:
```
Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
Output: 6
Explanation: The LCA of nodes 2 and 8 is 6.
```
### Example 2:
```
Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4
Output: 2
Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself 
             according to the LCA definition.
```
### Note:

   - All of the nodes' values will be unique.
   - p and q are different and both values will exist in the BST.

##### my code(*Accepted*)
```python
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root, p, q):
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """
        if root == None:
            return None
        
        self.res = None
        
        def find(root, p, q):
            if root == None:
                return False
            left = find(root.left, p, q)
            right = find(root.right, p, q)
            if left and right:
                self.res = root
            elif (root == p or root == q):
                if left or right:
                    self.res = root
                return True
            return left or right
        
        find(root, p, q)
        return self.res
```


##### nice code(*Accepted*)
```python
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root, p, q):
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """
        pval, qval = min(p.val,q.val), max(p.val,q.val)
        res = root
        while not pval <= res.val <= qval:
            if res.val < pval:
                res = res.right
            else:
                res = res.left
        return res
```
*******************************
我自己的方法简单粗暴，直接用递归遍历整颗二叉树。但事实上我们并不需要走遍所有的节点。注意这里的是**BST**，那么作为公共的祖先节点它的值一定在p和q之间。所以我们很容易想到，如果当前节点的值大于p、q中的最大值，那么我们答案应该在左子树上；反之则在右子树上。这样可以减少大量不必要的计算。