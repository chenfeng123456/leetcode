# Insert into a Binary Search Tree
## Description
```
Given the root node of a binary search tree (BST) and a value to be inserted into the tree, insert the value into the BST. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.

Note that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them.

For example, 

Given the tree:
        4
       / \
      2   7
     / \
    1   3
And the value to insert: 5

You can return this binary search tree:

         4
       /   \
      2     7
     / \   /
    1   3 5

This tree is also valid:

         5
       /   \
      2     7
     / \   
    1   3
         \
          4

```
```cpp
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
        if(val > root->val)
        {
            if(root->right == NULL) 
            {
                root->right = new TreeNode(val);
            }
            else
                insertIntoBST(root->right,val);
        }
        else 
        {
            if(root->left == NULL)
                root->left = new TreeNode(val);
            else 
                insertIntoBST(root->left,val);
        }
        return root;
    }
};
```
**********************************
本题要求在给定二叉树中插入一个指定值。插入方法有多种，这里我们选择插入到二叉树的底端。

过程很简单：根据BST的特性，我们比较给定值与当前节点的值的大小，若大于，则再看其右子树是否为空，若为空则直接将该值插在后面，若不为空，则进行递归。若给定值小于当前节点的值也是类似处理。