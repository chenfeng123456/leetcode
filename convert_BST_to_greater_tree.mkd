# Convert BST to Greater Tree
## Description:
```
Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.
```
### Example:
```
Input: The root of a Binary Search Tree like this:
              5
            /   \
           2     13

Output: The root of a Greater Tree like this:
             18
            /   \
          20     13
```
```python
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def convertBST(self, root):
        """
        :type root: TreeNode
        :rtype: TreeNode
        """
        global nodes_sum
        nodes_sum = 0
        
        def convert(root):
            global nodes_sum
            if root == None:
                return
            convert(root.right)
            temp = nodes_sum + root.val
            root.val += nodes_sum
            nodes_sum = temp
            convert(root.left)
        
        convert(root)
        return root
```
*******************************************
这道题是要把一棵二叉搜索树的每个节点加上所有比它大的节点的值。这样的话我们可以从最大的节点开始遍历，并用一个变量nodes_sum来记录遍历过的节点值之和。这样nodes_sum里面记录的永远是比当前节点大的所有值之和。
