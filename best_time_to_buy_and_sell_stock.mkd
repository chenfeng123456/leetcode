Best Time to Buy and Sell Stock
==========================
Description:
-----------------
Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.

Example 1:
----------------
Input: [7, 1, 5, 3, 6, 4]<br>
Output: 5<br>
max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)<br>

Example 2:
------------
Input: [7, 6, 4, 3, 1]<br>
Output: 0<br>
In this case, no transaction is done, i.e. max profit = 0.<br>


my code:
---------

```c
int maxProfit(int* prices, int pricesSize) {
    int maxP=0;
    for(int i=0;i<pricesSize-1;i++)
    {
        for(int j=i+1;j<pricesSize;j++)
        {
            if((prices[j]-prices[i])>maxP) maxP=prices[j]-prices[i];
        }
    }
    return maxP;
}
```
nice code:
-----------------
```java
public class Solution {
    public int maxProfit(int prices[]) {
        int minprice = Integer.MAX_VALUE;
        int maxprofit = 0;
        for (int i = 0; i < prices.length; i++) {
            if (prices[i] < minprice)
                minprice = prices[i];
            else if (prices[i] - minprice > maxprofit)
                maxprofit = prices[i] - minprice;
        }
        return maxprofit;
    }
}
```
***************************
我的方法简单粗暴，这里只讲一下别人的好方法。    
要想获得最大收益，就需要买进的价钱尽可能低，卖出的价钱尽可能高，但并不一定就是最小值和最大值。所以我们会判断当前元素是否为最小元素，若是则存进变量minprice中。因为若有更大的价钱出现在后面，那么一定是该数与minprice的差为最大利益，minprice前面的数均不用考虑。因而若当前元素的值是否大于minprice，若大于，则计算它与minprice的差是否最大，若是，则其一定为目前为止的最大收益。
