Find Bottom Left Tree Value
===================
Description:
----------------
 Given a binary tree, find the leftmost value in the last row of the tree.

Example 1:
-------------
Input:<br>
     2<br>
    /  \ <br>
  1   3<br>

Output:<br>
1

Example 2:
------------------
Input:<br>

        1
       / \
      2   3
     /   / \
    4   5   6
       /
      7

Output:<br>
7<br>

Note: 
---------------
You may assume the tree (i.e., the given root node) is not NULL. 












```cpp
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
struct Tree
{
    int val;
    int left;
    int depth;
};


class Solution {
public:
    void findAllBottom(TreeNode* root,int depth,int left,vector<Tree> &res)
    {
        if(root->left==NULL&&root->right==NULL)
        {
            static int i=0;
            Tree temp;
            temp.val=root->val;
            temp.left=left;
            temp.depth=depth;
            res.push_back(temp);
        }
        else if(root->left!=NULL&&root->right==NULL) findAllBottom(root->left,depth+1,left+1,res);
        else if(root->left==NULL&&root->right!=NULL) findAllBottom(root->right,depth+1,left,res);
        else
        {
            findAllBottom(root->left,depth+1,left+1,res);
            findAllBottom(root->right,depth+1,left,res);
        }
    }
    
    
    static bool complare(const Tree &x,Tree &y)
    {
        if(x.depth!=y.depth) return x.depth>y.depth;
        else if(x.depth==y.depth) return x.left>y.left;
    }
    
    int findBottomLeftValue(TreeNode* root) {
        vector<Tree> res;
        findAllBottom(root,0,0,res);
        sort(res.begin(),res.end(),complare);
        return res[0].val;
    }
};
```
***********************************************************
这道题要我们找到最深最左子树的值。方便起见，我们定义一个结构体，有该子树的值、深度和“左值”（即从根节点到这里经过了多少个left）组成。用递归将每个节点的数据用一个结构体数组存储起来。然后按“深度降序，深度相同则‘左度’降序”排列，最后再将排在第一的元素的值输出即可。
