Delete and Earn
==================
Description:
-----------------------------
 Given an array nums of integers, you can perform operations on the array.

In each operation, you pick any nums[i] and delete it to earn nums[i] points. After, you must delete every element equal to nums[i] - 1 or nums[i] + 1.

You start with 0 points. Return the maximum number of points you can earn by applying such operations.

Example 1:
----------------------
Input: nums = [3, 4, 2]
Output: 6
Explanation: 
Delete 4 to earn 4 points, consequently 3 is also deleted.
Then, delete 2 to earn 2 points. 6 total points are earned.

Example 2:
------------------------------
Input: nums = [2, 2, 3, 3, 3, 4]
Output: 9
Explanation: 
Delete 3 to earn 3 points, deleting both 2's and the 4.
Then, delete 3 again to earn 3 points, and 3 again to earn 3 points.
9 total points are earned.

Note:
----------------------
The length of nums is at most 20000.
Each element nums[i] is an integer in the range [1, 10000].







```cpp
class Solution {
public:
    int deleteAndEarn(vector<int>& nums) {
        if(nums.size()==0) return 0;
        if(nums.size()==1) return nums[0];
        sort(nums.begin(),nums.end());
        vector<vector<int>> maxp;
        int temp=nums[0],count=0;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]!=temp)
            {
                vector<int> t(2);
                t[0]=temp;
                t[1]=count;
                maxp.push_back(t);
                temp=nums[i];
                count=1;
            }
            else count++;
        }
        vector<int> t(2);
        t[0]=temp;
        t[1]=count;
        maxp.push_back(t);
        if(maxp.size()==1) return maxp[0][0]*maxp[0][1];
        vector<int> res(maxp.size());
        res[0]=maxp[0][0]*maxp[0][1];
        if(maxp[1][0]-maxp[0][0]>1) res[1]=res[0]+maxp[1][0]*maxp[1][1];
        else res[1]=(maxp[0][0]*maxp[0][1])>(maxp[1][0]*maxp[1][1])?(maxp[0][0]*maxp[0][1]):(maxp[1][0]*maxp[1][1]);
        for(int i=2;i<res.size();i++)
        {
            if(maxp[i][0]-maxp[i-1][0]>1) res[i]=res[i-1]+maxp[i][0]*maxp[i][1];
            else res[i]=(maxp[i][0]*maxp[i][1]+res[i-2])>res[i-1]?(maxp[i][0]*maxp[i][1]+res[i-2]):res[i-1];
        }
        return res[res.size()-1];
        cout<<maxp.size()<<endl;
    }
};
```
这道题与[House Robber](https://leetcode.com/problems/house-robber/description/)相似。<br>
我们先将此题转换一下：将整个数组按升序重新排序后，定义一个二维数组，每一行的第一列为元素的值，第二列为数组中元素的个数。当我们删除一个元素时，获得的点数就是第一列和第二列的乘积。此时就与House Robber类似了，在这个二维数组中，相邻元素不能同时取。**但要注意一点，若相邻元素相差大于等于2，则此时的相邻元素是可以取的。**<br>
接下来的做法就跟House Robber一样了，用动态规划解决。
