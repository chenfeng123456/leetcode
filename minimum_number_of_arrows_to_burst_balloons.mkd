# Minimum Number of Arrows to Burst Balloons
## Description:
```
There are a number of spherical balloons spread in two-dimensional space. For each balloon, provided input is the start and end coordinates of the horizontal diameter. Since it's horizontal, y-coordinates don't matter and hence the x-coordinates of start and end of the diameter suffice. Start is always smaller than end. There will be at most 104 balloons.

An arrow can be shot up exactly vertically from different points along the x-axis. A balloon with xstart and xend bursts by an arrow shot at x if xstart ≤ x ≤ xend. There is no limit to the number of arrows that can be shot. An arrow once shot keeps travelling up infinitely. The problem is to find the minimum number of arrows that must be shot to burst all balloons.
```
### Example:

#### Input:
```
[[10,16], [2,8], [1,6], [7,12]]
```
#### Output:
```
2
```
#### Explanation:
```
One way is to shoot one arrow for example at x = 6 (bursting the balloons [2,8] and [1,6]) and another arrow at x = 11 (bursting the other two balloons).
```
```cpp
class Solution {
public:
    int findMinArrowShots(vector<pair<int, int>>& points) {
        if(points.empty()) return 0;
        sort(points.begin(),points.end());
        int res=1;
        int end=points[0].second;
        for(int i=1;i<points.size();i++)
        {
            if(points[i].first<=end) 
            {
                end=min(end,points[i].second);
            }
            else
            {
                res++;
                end=points[i].second;
            }
        }
        return res;
    }
};
```
*******************************
这道题实质上就是要找重叠区间，若区间有重叠，则只需要一箭；若没有，则要加一箭。判断的标准就是看每一个元素的first是否小于等于end，end是当前元素之前的某个元素所能覆盖的最远处坐标，即它的second。如果first大于end，需要把end更新为当前元素的second。

***这里需要着重考虑的是，如果一个气球完全被前一个气球覆盖住的话，我们还需要考虑到此时的重叠区间的end应改为被覆盖住的气球的second，因为原先的end已经超出了重叠范围。***

- [参考思路](https://www.cnblogs.com/grandyang/p/6050562.html)