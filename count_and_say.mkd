***my code:***
```c
char* countAndSay(int n) {
    if(n==1)
    {
        char *answer=(char *)malloc(sizeof(char));
        answer[0]='1';
        return answer;
    }
    /*else if(n==2)
    {
            char *answer=(char *)malloc(sizeof(char)*2);
            answer[0]='1';
            answer[1]='1';
            return answer;
    }*/ //这段其实可以不要
    else
    {
        char *pre=countAndSay(n-1);
        int size=strlen(pre);
        int *preN=(int *)malloc(2*size*sizeof(int));
        int j=-2;
        for(int i=0;i<size;)
        {
            j=j+2;
            preN[j+1]=pre[i]-'1'+1;
            preN[j]=0;
            while(pre[i]==preN[j+1]-1+'1'&&i<size)
            {
                preN[j]++;
                i++;
            }
        }
        char *answer=(char *)malloc(sizeof(char)*2*size);
        int k=0;
        for(int i=0;k<j+1;i=i+2)
        {
            if(preN[i]==0) continue;
            answer[k]=preN[i]-1+'1';
            answer[k+1]=preN[i+1]-1+'1';
            k=k+2;
        }
        answer[k]='\0';
        free(preN);
        free(pre);
        return answer;
    }
}

```
***mosified code:***
```c
char* countAndSay(int n) {
    if(n==1)
    {
        char *answer=(char *)calloc(2, sizeof(char));
        answer[0]='1';
        return answer;
    }
    
    else
    {
        char *pre=countAndSay(n-1);
        int size=strlen(pre);
        int *preN=(int *)calloc(2*size, sizeof(int));
        int j=-2;
        for(int i=0;i<size;)
        {
            j=j+2;
            preN[j+1]=pre[i]-'1'+1;
            preN[j]=0;
            while(pre[i]==preN[j+1]-1+'1'&&i<size)
            {
                preN[j]++;
                i++;
            }
        }
        char *answer=(char *)calloc(2*size, sizeof(char));
        int k=0;
        for(int i=0;k<j+1;i=i+2)
        {
            if(preN[i]==0) continue;
            answer[k]=preN[i]-1+'1';
            answer[k+1]=preN[i+1]-1+'1';
            k=k+2;
        }
        answer[k]='\0';
        free(preN);
        free(pre);
        return answer;
    }
}
```
上述的两份代码关键的区别就在于一个用malloc函数分配内存（Wrong Answer），一个用的是calloc（Accepted）。所以我们这里主要归纳以下两者的不同之处：<br>
1.calloc函数会对所申请的空间初始化（全部初始化为0），而malloc则不会。也就是说我们用malloc申请了一片空间之后，里面的数据是无法预料的，也就是垃圾数据————这也就解释了为什么我的代码每次提交后错误的结果总是不同。
2.malloc函数的效率高于calloc函数。虽然calloc函数用起来更加安全，但它毕竟多了一个对内存写零的操作，其效率自然会低一些。而很多时候我们并不需要这个操作，所以在实际的代码编写过程中，我们会更多地见到malloc函数而非calloc。
3.
