# Wiggle Subsequence
## Description:
```
A sequence of numbers is called a wiggle sequence if the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with fewer than two elements is trivially a wiggle sequence.

For example, [1,7,4,9,2,5] is a wiggle sequence because the differences (6,-3,5,-7,3) are alternately positive and negative. In contrast, [1,4,7,2,5] and [1,7,4,5,5] are not wiggle sequences, the first because its first two differences are positive and the second because its last difference is zero.

Given a sequence of integers, return the length of the longest subsequence that is a wiggle sequence. A subsequence is obtained by deleting some number of elements (eventually, also zero) from the original sequence, leaving the remaining elements in their original order.
```
### Examples:
```
Input: [1,7,4,9,2,5]
Output: 6
The entire sequence is a wiggle sequence.

Input: [1,17,5,10,13,15,10,5,16,8]
Output: 7
There are several subsequences that achieve this length. One is [1,17,10,13,10,16,8].

Input: [1,2,3,4,5,6,7,8,9]
Output: 2
```
### Follow up:
```
Can you do it in O(n) time? 
```
#### Dynamic Programming
```cpp
class Solution {
public:
    int wiggleMaxLength(vector<int>& nums) {
        if(nums.empty()) return 0;
        vector<int> pos(nums.size(),1);
        vector<int> neg(nums.size(),1);
        for(int i=1;i<nums.size();i++)
        {
            for(int j=0;j<i;j++)
            {
                if(nums[i]>nums[j]) pos[i]=max(pos[i],neg[j]+1);
                else if(nums[i]<nums[j]) neg[i]=max(neg[i],pos[j]+1);
            }
        }
        return max(pos.back(),neg.back());
    }
};
```
*********************************
#### Greedy
```cpp
class Solution {
public:
    int wiggleMaxLength(vector<int>& nums) {
        int p = 1, q = 1, n = nums.size();
        for (int i = 1; i < n; ++i) {
            if (nums[i] > nums[i - 1]) p = q + 1;
            else if (nums[i] < nums[i - 1]) q = p + 1;
        }
        return min(n, max(p, q));
    }
};
```
*********************************
*********************************
- [思路来源](https://www.cnblogs.com/grandyang/p/5697621.html)


1. ***动态规划****：我们定义两个数组pos和neg分别表示到i位置首差值为正和为负的最长摇摆子序列。每到一个位置就依次将前面所有元素与当前元素比较，根据大小关系来更新两个数组。
2. ***贪心算法***：我们只定义两个变量pos和neg，然后遍历数组，如果当前数字比前一个数字大，则pos=neg+1，如果比前一个数字小，则neg=pos+1，最后取pos和neg中的较大值跟n比较，取较小的那个。<br>
其实最后直接比较pos和neg的大小也能提交成功，不知道原作者是出于什么考虑要这样写。