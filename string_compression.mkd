# String Compression
## Description
```
Given an array of characters, compress it in-place.

The length after compression must always be smaller than or equal to the original array.

Every element of the array should be a character (not int) of length 1.

After you are done modifying the input array in-place, return the new length of the array.

Follow up:
Could you solve it using only O(1) extra space?
```
### Example 1:
```
Input:
["a","a","b","b","c","c","c"]

Output:
Return 6, and the first 6 characters of the input array should be: ["a","2","b","2","c","3"]

Explanation:
"aa" is replaced by "a2". "bb" is replaced by "b2". "ccc" is replaced by "c3".
```
### Example 2:
```
Input:
["a"]

Output:
Return 1, and the first 1 characters of the input array should be: ["a"]

Explanation:
Nothing is replaced.
```
### Example 3:
```
Input:
["a","b","b","b","b","b","b","b","b","b","b","b","b"]

Output:
Return 4, and the first 4 characters of the input array should be: ["a","b","1","2"].

Explanation:
Since the character "a" does not repeat, it is not compressed. "bbbbbbbbbbbb" is replaced by "b12".
Notice each digit has it's own entry in the array.
```
### Note:

   1. All characters have an ASCII value in [35, 126].
   2. 1 <= len(chars) <= 1000.
```python
def compress(self, chars):
    """
    :type chars: List[str]
    :rtype: int
    """
    result_len = 0
    i, original_len = 0, len(chars)
    while i < original_len:
        char, count = chars[i], 0
        while i < original_len and char == chars[i]:
            count += 1
            i += 1
        
        result_len += 1
        chars[result_len-1] = char
        if count > 1:
            count = str(count)
            for c in count:
                result_len += 1
                chars[result_len-1] = c
    return result_len
```
************************************
这题的题意很不清楚，我返回一个长度结果下面的输出是一个列表；我返回一个列表结果它报错说不能直接将一个列表转换成数字。最后看了别人的答案才明白原来是既要我们返回长度，又要我们在原列表的基础上进行修改。

解题方面大体上的思路就是每种字符的第一个开始往后遍历，同时计数直至遇到一个不同的字符为止，然后判断压缩后的长度是否小于原长，若小于，则在原字符串的基础上进行改动。

解法中用多个变量来作为下标，分别用于进行遍历和修改，这样做比较合理。