Maximum Product Subarray
==================
Description:
-----------------
 Find the contiguous subarray within an array (containing at least one number) which has the largest product.

For example, given the array [2,3,-2,4],
the contiguous subarray [2,3] has the largest product = 6. 



```cpp
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int minpre=nums[0],maxpre=nums[0],mincur,maxcur,MAX=nums[0];
        cout<<minpre<<':'<<maxpre<<endl;
        for(int i=1;i<nums.size();i++)
        {
            mincur=min(min(minpre*nums[i],maxpre*nums[i]),nums[i]);
            maxcur=max(max(minpre*nums[i],maxpre*nums[i]),nums[i]);
            minpre=mincur;
            maxpre=maxcur;
            cout<<minpre<<':'<<maxpre<<endl;
            MAX=max(MAX,maxcur);
        }
        return MAX;
    }
};
```
*********************************************************
这道题我只能想到暴力解题，最后只好到网上看了以下别人的方法。<br>
这题最头疼的就是要考虑到负数和0的存在：如果有奇数个负数，我们可能要舍去第一或最后一个负数；如果有偶数个负数则可以将整个数组乘起来；而如果有0，还要以0为界将数组分开。如此考虑十分麻烦。<br>
所以我们不能值考虑当前的最大值，还需一个变量存储当前的最小值。如果当前元素为负，那么当前最大值乘上它就变成了最小值;但如果后面还有一个负数那么此最小值乘上它就又变成了最大值。这样用动态规划就能交容易地写出代码了。
